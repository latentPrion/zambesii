*^If a queue holds the system timekeeper routine, do not disable() it when
  it is empty.

*^In the event that a high priority task is scheduled, the kernel should
  pre-empt the current task, and load the higher priority task. This change
  will fix the fact that currently, the system time value will not be updated
  unless the Timer Trib thread runs.
	^An alternative solution is to augment ZKCM timer device's API to accept
	a call-in from the timer queue which the chipset has chosen to serve as
	the system-timekeeper, and enable the actual device driver itself to
	update the system time when it IRQs.

	This might actually be the best solution altogether, since it will
	enable us not to /require/ a thread switch to keep the kernel's system
	clock up-to-date.

	Any other implications?

*^Modify the tick code to check the next request in the queue after one expires;
  This is to handle the case where two or more requests expire at the same time,
  and are in the queue in tandem.

* Write the code for migration on tick. [Not yet done]

* Complete the high-precision tail-end implementation of timeout requests by
  enabling the kernel to latch onto a oneshot timer. [Not yet done]

Right now, when a request is queued, it will be queued on the most optimal queue
for it to start on, and never migrate. The concrete tages it passes through are:
	* Queueing.
	* Ticking until it expires.
	* Expiring.
	* Dispatching.

Of these, the only one which isn't done properly yet is ticking. Expiration
will need to be extended later on, but that can wait.

Ticking needs to enable the request to migrate to lower period queues.
Additionally, be sure to turn the tick() processing stretch into a loop which
checks the request queue multiple times if a request expires.

^ Furthermore, there is a need for you to complete the Timer Stream end of the
abstraction. Right now, a request which expires before a process' currently
inserted request can come in, and it will be queued instead of immediately
inserted.
	^ Each stream should hold a pointer to the request it has currently
	inserted into the kernel's timer queues; this pointer can be used to
	speed up this check when inserting. In fact, it not only speeds up this
	check, but also simplifies the general check for whether or not to
	insert a new request into the timer queues, or into the process' request
	queue.

Solve the race conditions on insertion from Timer Stream by providing a locking
method for insertion from Timer Stream.

When all of these changes have been made, the kernel's timer subsystem will be
completed.
