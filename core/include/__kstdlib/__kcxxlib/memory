#ifndef ___K_CXX_LIB_POINTER_H
	#define ___K_CXX_LIB_POINTER_H

	#include <__kstdlib/__ktypes.h>
	#include <__kstdlib/__kcxxlib/new>

class MemoryStream;
class VaddrSpaceStream;

namespace pointer
{
	void vmemUnmapAndFree(
		void *vaddr, uarch_t nPages, status_t nMapped,
		VaddrSpaceStream *vasStream);

	void streamFree(void *vaddr, MemoryStream *memStream);
}

template <class type, class DeleterType>
class Pointer
{
protected:
	explicit Pointer(type *_p=NULL) : p(_p) {}
	~Pointer(void) { reset(); }

public:
	Pointer &operator =(Pointer &_p)
	{
		reset(_p.release());
		deleter = _p.get_deleter();
		return *this;
	}

public:
	// Equivalent to std::unique_ptr<>::get().
	type *get(void) { return p; }
	type **addressOf(void) { return &p; }
	// Equivalent to std::unique_ptr<>::reset(void *=NULL).
	void reset(type *_p=NULL)
	{
		get_deleter()(p);
		p = _p;
	}
	// Equivalent to std::unique_ptr<>::release().
	type *release(void)
	{
		type	*tmp=p;
		p = NULL;
		return tmp;
	}

	type *operator ->() { return p; }
	type &operator *() { return *p; }
	type &operator [](int i) { return p[i]; }
	Pointer &operator =(type *_p) { p = _p; return *this; }
	int operator ==(type *_p) { return p == _p; }
	int operator >(type *_p) { return p > _p; }
	int operator <(type *_p) { return p < _p; }
	Pointer &operator++(void) { ++p; return *this; }
	Pointer &operator--(void) { --p; return *this; }
	DeleterType &get_deleter(void) { return deleter; }

	// We refuse to provide operators + and -. Use array indexing instead.
private:
	/* Force this class to be pure-virtual because its reset() is not
	 * practically useful and is really unimplemented.
	 */
	virtual void _(void) = 0;

public:
	DeleterType	deleter;

protected:
	type	*p;
};

class BuiltinDeleter {};

template <class T>
class DefaultDeleter
: public BuiltinDeleter
{
public:
	void operator ()(T *ptr)
	{
		if (ptr != NULL) {
			delete ptr;
		}
	}
};

template <class T>
class ArrayDeleter
: public BuiltinDeleter
{
public:
	void operator ()(T *ptr)
	{
		if (ptr != NULL) {
			delete[] ptr;
		}
	}
};

template <class T>
class StreamDeleter
{
	StreamDeleter(void)
	:
	stream(NULL)
	{}

	~StreamDeleter(void) { stream = NULL; }

public:
	void operator()(T *ptr)
	{
		if (ptr != NULL) {
			pointer::streamFree(ptr, stream);
		}
	}

public:
	MemoryStream		*stream;
};

template <class T>
class LoosePageDeleter
{
public:
	LoosePageDeleter(void)
	:
	nPages(0), nMapped(0), vasStream(NULL)
	{}

	~LoosePageDeleter(void)
	{
		nPages = 0;
		vasStream = NULL;
		nMapped = 0;
	}

public:
	void operator ()(T *ptr)
	{
		if (ptr != NULL)
		{
			pointer::vmemUnmapAndFree(
				ptr, nPages, nMapped, vasStream);
		}
	}

public:
	uarch_t			nPages;
	status_t		nMapped;
	VaddrSpaceStream	*vasStream;
};

template <class type>
class HeapObj
: public Pointer<type, DefaultDeleter<type> >
{
public:
	explicit HeapObj(type *_p=NULL)
	: Pointer<type, DefaultDeleter<type> >(_p)
	{}

	using Pointer<type, DefaultDeleter<type> >::operator =;

private:
	virtual void _(void) {}
};

template <class type>
class HeapArr
: public Pointer<type, ArrayDeleter<type> >
{
public:
	explicit HeapArr(type *_p=NULL)
	: Pointer<type, ArrayDeleter<type> >(_p)
	{}

	using Pointer<type, ArrayDeleter<type> >::operator =;
private:
	virtual void _(void) {}
};

template <class type>
class LoosePage
: public Pointer<type, LoosePageDeleter<type> >
{
public:
	explicit LoosePage(type *_p=NULL)
	: Pointer<type, LoosePageDeleter<type> >(_p)
	{}

	using Pointer<type, LoosePageDeleter<type> >::operator =;

private:
	virtual void _(void) {}
};

template <class type>
class StreamMem
: public Pointer<type, StreamDeleter<type> >
{
public:
	explicit StreamMem(type *_p=NULL)
	: Pointer<type, StreamDeleter<type> >(_p)
	{}

	using Pointer<type, StreamDeleter<type> >::operator =;

private:
	virtual void _(void) {}
};

#endif

